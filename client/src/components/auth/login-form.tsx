import React from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Link } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/context/auth-context";

const loginSchema = z.object({
  email: z.string().email({ message: "Email kh√¥ng h·ª£p l·ªá" }),
  password: z.string().min(1, { message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginForm() {
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });
  
  const { login } = useAuth();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  
  const onSubmit = async (values: LoginFormValues) => {
  setIsSubmitting(true);
  try {
    const res = await apiRequest("POST", "/api/auth/login", values);
    await throwIfResNotOk(res);

    const me = await fetch("/api/auth/me", {
      credentials: "include",
    });

    if (!me.ok) throw new Error("Kh√¥ng x√°c th·ª±c");

    const user = await me.json();
login(user); // c·∫≠p nh·∫≠t context

toast({
  title: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
  description: "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i v·ªõi GreenChallenge!",
});

// üëâ Thay v√¨ reload to√†n b·ªô, ch·ªâ redirect b·∫±ng router
window.location.assign("/profile"); // ho·∫∑c n·∫øu d√πng react-router: navigate("/profile")

  } catch (error) {
    toast({
      variant: "destructive",
      title: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i",
      description:
        error instanceof Error ? error.message : "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
    });
  } finally {
    setIsSubmitting(false);
  }
};

  
  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-primary text-2xl font-semibold">ƒêƒÉng nh·∫≠p</CardTitle>
        <CardDescription>
          ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh b·∫£o v·ªá m√¥i tr∆∞·ªùng c·ªßa b·∫°n
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input placeholder="nguyenvan@example.com" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>M·∫≠t kh·∫©u</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button 
              type="submit" 
              className="w-full bg-primary hover:bg-primary-dark" 
              disabled={isSubmitting}
            >
              {isSubmitting ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-center">
        <p className="text-sm text-gray-600">
          Ch∆∞a c√≥ t√†i kho·∫£n?{" "}
          <Link href="/register">
            <a className="text-primary hover:underline font-medium">ƒêƒÉng k√Ω ngay</a>
          </Link>
        </p>
      </CardFooter>
    </Card>
  );
}
function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    throw new Error(`HTTP ${res.status}: ${res.statusText}`);
  }
}


